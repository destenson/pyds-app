[build-system]
requires = ["setuptools>=64", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pyds-app"
version = "0.1.0"
description = "Robust DeepStream inference system for real-time video analytics"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "DeepStream Analytics Team", email = "team@deepstream-analytics.com"}
]
maintainers = [
    {name = "DeepStream Analytics Team", email = "team@deepstream-analytics.com"}
]
keywords = [
    "deepstream", "gstreamer", "video-analytics", "nvidia", "computer-vision",
    "real-time", "inference", "detection", "pipeline", "streaming"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Multimedia :: Video",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
requires-python = ">=3.11"
dependencies = [
    # Image processing and numerical computing
    "numpy>=2.3.2",
    "opencv-python>=4.5.0",

    # Configuration and CLI
    "pyyaml>=6.0",
    "pydantic>=2.0.0",
    "click>=8.0.0",

    # Async and concurrency
    "aiofiles>=23.0.0",

    # Logging and monitoring  
    "structlog>=23.1.0",
    "prometheus-client>=0.17.0",
    "rich>=13.0.0",

    # Data validation and serialization
    "marshmallow>=3.19.0",
    "jsonschema>=4.17.0",

    # HTTP client for webhooks
    "httpx>=0.24.0",
    "aiohttp>=3.8.0",

    # Utilities
    "python-dateutil>=2.8.0",
    "psutil>=5.9.0",
    "tabulate>=0.9.0",
]

[project.optional-dependencies]
# DeepStream dependencies (version-specific)
deepstream5 = [
    # Note: pyds for DeepStream 5.x must be installed manually from NVIDIA
    # as it's not available on PyPI. This is a placeholder.
]
deepstream6 = [
    # Note: DeepStream 6.x uses gi.repository bindings
    # These are typically installed with the DeepStream SDK
]
deepstream7 = [
    # Note: DeepStream 7.x uses updated gi.repository bindings
    # These are typically installed with the DeepStream SDK
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xvfb>=3.0.0",  # For headless testing with X11
    "pytest-timeout>=2.1.0",
    
    # Code quality and formatting
    "ruff>=0.12.0",
    "black>=23.0.0",
    "mypy>=1.5.0",
    "isort>=5.12.0",
    
    # Static analysis and security
    "bandit[toml]>=1.7.5",      # Security scanning
    "semgrep>=1.45.0",          # Advanced security rules  
    "vulture>=2.10",            # Dead code detection
    "safety>=2.3.5",            # Dependency vulnerability scanning
    "pip-audit>=2.6.1",         # Alternative dependency scanner
    "pre-commit>=3.6.0",        # Git hooks framework
    "prospector>=1.10.3",       # Analysis aggregator
    "coverage[toml]>=7.3.0",    # Enhanced coverage analysis
    "diff-cover>=8.0.0",        # Coverage diff analysis
    "coverage-badge>=1.1.0",    # Generate coverage badges
    
    # Type stubs
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
    "types-python-dateutil>=2.8.0",
    
    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    
    # Profiling and debugging
    "memory-profiler>=0.61.0",
    "py-spy>=0.3.14",
    "line-profiler>=4.1.0",
]

# gstreamer = [
#     # Core GStreamer and Python bindings
#     "pycairo>=1.20.0",
#     "pygobject>=3.40.0",
#     "asyncio-glib>=0.1",
# ]

# Testing dependencies
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xvfb>=3.0.0",
    "pytest-timeout>=2.1.0",
    "factory-boy>=3.3.0",
    "faker>=19.0.0",
]

# Production deployment
prod = [
    "gunicorn>=21.2.0",
    "uvloop>=0.17.0",  # Faster event loop for production
    "setproctitle>=1.3.0",  # Process title management
]

# GPU and CUDA support (optional)
gpu = [
    # Note: CUDA dependencies are typically managed at system level
    # These are Python packages that provide CUDA integration
    "cupy-cuda11x>=12.0.0; sys_platform=='linux'",  # For CUDA 11.x on Linux
    "pynvml>=11.5.0",  # NVIDIA Management Library
]

[project.urls]
Homepage = "https://github.com/deepstream-analytics/pyds-app"
Documentation = "https://pyds-app.readthedocs.io/"
Repository = "https://github.com/deepstream-analytics/pyds-app.git"
Issues = "https://github.com/deepstream-analytics/pyds-app/issues"
Changelog = "https://github.com/deepstream-analytics/pyds-app/blob/main/CHANGELOG.md"

[project.scripts]
pyds-app = "src.app:main"
pyds-benchmark = "scripts.benchmark_performance:main"
pyds-setup = "scripts.setup_environment:main"
pyds-validate = "scripts.validate_installation:main"

[project.entry-points."pyds_app.detection_strategies"]
# Entry points for custom detection strategies
yolo = "src.detection.strategies:YOLOStrategy"
template = "src.detection.strategies:TemplateMatchingStrategy"
feature = "src.detection.strategies:FeatureBasedStrategy"

[project.entry-points."pyds_app.alert_handlers"]
# Entry points for custom alert handlers
console = "src.alerts.handlers:ConsoleHandler"
file = "src.alerts.handlers:FileHandler"  
webhook = "src.alerts.handlers:WebhookHandler"
email = "src.alerts.handlers:EmailHandler"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*", "docs*", "examples*", "scripts*"]

[tool.setuptools.package-data]
"src" = ["py.typed"]
"src.configs" = ["*.yaml", "*.yml", "*.json"]

# Ruff configuration for linting and formatting
[tool.ruff]
target-version = "py38"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
    "SIM", # flake8-simplify
    "LOG", # flake8-logging
]
ignore = [
    "S101",   # Use of assert detected
    "S603",   # subprocess call: check for execution of untrusted input
    "S607",   # Starting a process with a partial executable path
    "T201",   # print found (allowed for CLI applications)
    "B008",   # Do not perform function calls in argument defaults
]
exclude = [
    ".bzr",
    ".direnv", 
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "vendor",
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "S101",  # Allow assert in tests
    "S105",  # Possible hardcoded password (test data)
    "S106",  # Possible hardcoded password (test data)
]
"examples/**/*.py" = [
    "T201",  # Allow print statements in examples
    "S101",  # Allow assert in examples
]

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.isort]
known-first-party = ["src", "tests"]
split-on-trailing-comma = true

# Black configuration
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | vendor
)/
'''

# MyPy configuration - Enhanced for strict type checking
[tool.mypy]
# Python version and strict mode
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true

# Type checking strictness
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_any_unimported = true
disallow_subclassing_any = true
no_implicit_optional = true
strict_optional = true

# Warning controls
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
warn_missing_imports = true

# Error formatting
show_error_codes = true
show_column_numbers = true
show_error_context = true
pretty = true
color_output = true

# Performance optimizations
incremental = true
cache_dir = ".mypy_cache"
sqlite_cache = true

# Namespace packages support
namespace_packages = true
explicit_package_bases = true

# Plugin configurations
plugins = [
    "pydantic.mypy",
    "pytest_mypy_plugins.pydantic_plugin"
]

# Pydantic plugin settings
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

# Module-specific overrides
[[tool.mypy.overrides]]
module = [
    "gi.*",
    "pyds.*", 
    "cv2.*",
    "numpy.*",
    "gst.*",
    "pygobject.*"
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "conftest"
]
# Allow more relaxed checking in tests
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true

[[tool.mypy.overrides]]
module = [
    "scripts.*",
    "examples.*"
]
# Relaxed checking for scripts and examples
warn_return_any = false
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = "src.utils.deepstream"
# Special handling for DeepStream compatibility module
warn_return_any = false
disallow_any_generics = false
# This module handles optional imports and fallbacks

[[tool.mypy.overrides]]
module = "src.pipeline.manager" 
# GStreamer pipeline manager has complex callback types
warn_return_any = false
disallow_any_generics = false

[[tool.mypy.overrides]]
module = [
    "bandit.*",
    "vulture.*", 
    "semgrep.*",
    "safety.*",
    "prospector.*"
]
ignore_missing_imports = true

# Third-party type stub overrides
[[tool.mypy.overrides]]
module = [
    "rich.*",
    "click.*",
    "httpx.*",
    "aiohttp.*",
    "structlog.*",
    "prometheus_client.*"
]
# Allow some flexibility with third-party libraries
warn_return_any = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.4"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--disable-warnings",
    "--tb=short",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=90",
    "--timeout=300",  # 5 minute timeout for tests
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests", 
    "gpu: marks tests that require GPU/CUDA",
    "deepstream: marks tests that require DeepStream",
    "network: marks tests that require network access",
]
asyncio_mode = "auto"

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "tests/*",
    "examples/*", 
    "scripts/*",
    "*/vendor/*",
    "*/.venv/*",
    "*/build/*",
    "*/dist/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit security scanning configuration
[tool.bandit]
exclude_dirs = ["tests", "examples", "docs", "build", "dist", ".venv", "vendor"]
skips = [
    "B101",  # Test for use of assert (we use assert in tests)
    "B603",  # subprocess call: check for execution of untrusted input (handled contextually)
]
# High confidence level for CI, medium for local development
confidence = "medium"

[tool.bandit.assert_used]
skips = ["**/tests/**", "**/test_*.py"]

# Vulture dead code detection configuration
[tool.vulture]
exclude = ["build/", "dist/", ".venv/", "vendor/"]
ignore_decorators = ["@app.route", "@click.command", "@pytest.fixture", "@property"]
ignore_names = ["_*", "test_*", "Test*"]
min_confidence = 80
paths = ["src"]
sort_by_size = true

# Semgrep configuration
[tool.semgrep]
config = ["analysis/rules/"]
